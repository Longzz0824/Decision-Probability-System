import graphs
import heuristic
import calculation
import brute_force
import time
def g1():
    G1 = graphs.Graphs(5)
    G1.add_state('s0')
    G1.add_state('s1')
    G1.add_state('s2')
    G1.add_state('s3')
    G1.add_state('s4')
    G1.add_transition('s0->s1','0.5','can')
    G1.add_transition('s0->s2','0.5','can')
    G1.add_transition('s1->s3','0.01','cannot')
    G1.add_transition('s1->s4','0.99','can') #can
    G1.add_transition('s2->s4','0.98','cannot')
    G1.add_transition('s2->s3','0.02','cannot')
    G1.add_transition('s4->s4','1','can')
    G1.set_final_state('s3')
    G1.set_initial_state('s0')
    return G1

def g2():
    G1 = graphs.Graphs(8)
    G1.add_state('s0')
    G1.add_state('s1')
    G1.add_state('s2')
    G1.add_state('s3')
    G1.add_state('s4')
    G1.add_state('s5')
    G1.add_state('s6')
    G1.add_state('s7')
    G1.add_transition('s0->s7','0.3333','cannot')
    G1.add_transition('s0->s1','0.6667','can')
    G1.add_transition('s1->s2','0.125','cannot')
    G1.add_transition('s1->s3','0.4375','can')
    G1.add_transition('s1->s4','0.125','cannot')
    G1.add_transition('s1->s5','0.25','cannot')
    G1.add_transition('s1->s6','0.0625','can')
    G1.add_transition('s2->s3','0.3','can')
    G1.add_transition('s2->s4','0.4','can')
    G1.add_transition('s2->s7','0.3','can')
    G1.add_transition('s3->s6','0.5','cannot')
    G1.add_transition('s3->s7','0.5','cannot')
    G1.add_transition('s5->s6','1','can')
    G1.set_final_state('s2')
    G1.set_initial_state('s0')
    return G1

def g3():
    G1 = graphs.Graphs(5)
    G1.add_state('s0')
    G1.add_state('s1')
    G1.add_state('s2')
    G1.add_state('s3')
    G1.add_transition('s0->s1','0.3','can')
    G1.add_transition('s0->s3','0.4','can')
    G1.add_transition('s0->s3','0.3','cannot')
    G1.add_transition('s1->s0','0.1','cannot')
    G1.add_transition('s1->s2','0.3','can')
    G1.add_transition('s1->s1','0.2','cannot')
    G1.add_transition('s1->s3','0.4','cannot')
    G1.add_transition('s2->s0','0.3','can')
    G1.add_transition('s2->s3','0.7','can')
    G1.add_transition('s3->s0','0.2','cannot')
    G1.add_transition('s3->s1','0.3','cannot')
    G1.add_transition('s3->s2','0.3','can')
    G1.add_transition('s3->s3','0.2','can')
    G1.set_final_state('s3')
    G1.set_initial_state('s0')
    return G1
G1 = g1()
G2 = g2()
G3 = g3()
#print(G2.adjacency_matrix, G2.ability_matrix,G2.state_index_dict)

#graphs.show_graph(G1)
#calculation.print_special_states(G1)
#print('the probability if all the transitions are activated: ')
#calculation.print_result(G1)
#print('\nthe result of deactivate all useless transitions :')
t0 = time.process_time()
heuristic.brute_force_after_daut(G1)
t1 = time.process_time()
print('time',t1-t0)
#print('\nthe result of dijkstra :')
heuristic.dijkstra(G1)
#brute_force.brute_force(G1)
#print(heuristic.step_by_step_selection_probability(G1))
'''
G1 = g1()
G1.update()
print(G1.transition_current_probability_dict)
print(G1.is_reachable('s4','s3'))
heuristic.deactivate_all_useless_transitions(G1)
print(G1.transition_current_probability_dict)
print(G1.get_state('s4').in_transitions)
print(G1.get_transition('s1->s4').current_probability)
'''